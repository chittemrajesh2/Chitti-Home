#Terraform Commands:


Important & Advanced Terraform Commands you must know..

1. `terraform init`: Initializes a new or existing Terraform working directory by downloading and installing provider plugins. Example: `terraform init`

2. `terraform plan`: Generates an execution plan for Terraform to apply to the infrastructure. Example: `terraform plan`

3. `terraform apply`: Applies the changes to the infrastructure. Example: `terraform apply`.

4. `terraform destroy`: Destroys the Terraform-managed infrastructure. Example: `terraform destroy`

5. `terraform validate`: Validates the configuration files in a directory, referring only to the configuration and not accessing any remote services such as remote state, provider APIs, etc. Example: `terraform validate`

6. `terraform state`: Views and modifies the state file that Terraform uses to keep track of the resources it manages. Example: `terraform state list`

7. `terraform import`: Imports existing infrastructure into your Terraform state. Example: `terraform import aws_instance.example i-abcd1234`.

8. `terraform output`: Displays the outputs of a Terraform configuration. Example: `terraform output ip_address`

9. `terraform graph`: Creates a visual representation of the Terraform resources. Example: `terraform graph | dot -Tsvg > graph.svg`

10. `terraform taint`: Marks a Terraform-managed resource as tainted, forcing it to be destroyed and recreated on the next apply. Example: `terraform taint aws_instance.example`

11. `terraform untaint`: Removes the taint from a resource. Example: `terraform untaint aws_instance.exampleâ€™

12. `terraform refresh`: Updates the state file to match the real-world resources. Example: `terraform refresh` 

13.`terraform workspace`: Manages Terraform workspaces, which allow you to maintain multiple instances of your infrastructure in different states. Example: `terraform workspace new dev`

14. `terraform fmt`: Rewrites Terraform configuration files to a canonical format. Example: `terraform fmt`

15. `terraform providers`: Prints a tree of the available providers. Example: `terraform providers`

16. `terraform console`: Provides an interactive console for evaluating expressions. Example: `terraform console`
 
17. `terraform state pull`: Fetches the current state from a remote backend and writes it to a local file. Example: `terraform state pull > terraform.tfstate` 

18. `terraform state push`: Updates the remote backend with the current state. Example: `terraform state push`

19. `terraform state replace-provider`: Replaces the provider configuration for a resource in the Terraform state. Example: `terraform state replace-provider aws_instance.example aws=hashicorp/aws`

20. `terraform state rm`: Removes a resource from the Terraform state. Example: `terraform state rm aws_instance.example`

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Terraform commands used on daily basis:#Repost
1. terraform init:
- Initializes a working directory containing Terraform configuration files.

2. terraform plan:
- Generates an execution plan, outlining actions Terraform will take.

3. terraform apply:
- Applies the changes described in the Terraform configuration.

4. terraform destroy:
- Destroys all resources described in the Terraform configuration.

5. terraform validate:
- Checks the syntax and validity of Terraform configuration files.

6. terraform refresh:
- Updates the state file against real resources in the provider.

7. terraform output:
- Displays the output values from the Terraform state.

8. terraform state list:
- Lists resources within the Terraform state.

9. terraform show:
- Displays a human -readable output of the current state or a specific resource's state.

10. terraform import:
- Imports existing infrastructure into Terraform state.

11. terraform fmt:
- Rewrites Terraform configuration files to a canonical format.

12. terraform graph:
- Generates a visual representation of the Terraform dependency graph.

13. terraform providers:
- Prints a tree of the providers used in the configuration.

14. terraform workspace list:
- Lists available workspaces.

15. terraform workspace select:
- Switches to another existing workspace.

16. terraform workspace new:
- Creates a new workspace.

17. terraform workspace delete:
- Deletes an existing workspace.

18. terraform output:
- Retrieves output values from a module.

19. terraform state mv:
- Moves an item in the state.

20. terraform state pull:
- Pulls the state from a remote backend.

21. terraform state push:
- Pushes the state to a remote backend.

22. terraform state rm:
- Removes items from the state.

23. terraform taint:
- Manually marks a resource for recreation.

24. terraform untaint:
- Removes the 'tainted' state from a resource.

25. terraform login:
- Saves credentials for Terraform Cloud.

26. terraform logout:
- Removes credentials for Terraform Cloud.

27. terraform force -unlock:
- Releases a locked state.

28. terraform import:
- Imports existing infrastructure into your Terraform state.

29. terraform plan -out:
- Saves the generated plan to a file.

30. terraform apply -auto -approve:
- Automatically applies changes without requiring approval.

31. terraform apply -target=resource:
- Applies changes only to a specific resource.

32. terraform destroy -target=resource:
- Destroys a specific resource.

33. terraform apply -var="key=value":
- Sets a variable's value directly in the command line.

34. terraform apply -var -file=filename.tfvars:
- Specifies a file containing variable definitions.